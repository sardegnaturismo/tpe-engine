<?php

require_once 'copycat.config';

/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
/*
  function copycat_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
  case "admin/help#digital_library":
  $output = '<p>'.  t("Copycat managment") .'</p>';
  break;
  }
  return $output;
  } // function copycat help
 */

function copycat_get_node_list() {
  // this needs a little more work so the parent server knows exactly who is requesting information       
  global $settings;
  global $force_update;
  /*
   * Per provare ad aggiornare impostare $page = 1
   */
  $page = variable_get('copycat_' . $settings['importer'] . '_current_page', 0);
  $authenticate = xmlrpc($settings['server'], Array('user.login' => array($settings['user'], $settings['password']),));


  if (is_array($authenticate) && $authenticate['user']['name'] === $settings['user'] && $authenticate['user']['status'] == 1) {
    $options = Array();
    $options['headers']['Cookie'] = $authenticate['session_name'] . '=' . $authenticate['sessid'];
    $num_real_big=100000;
    
    if($page==0){
      
      $query = db_select('copycat_import', 'import');
      $query->join('copycat_list','list', 'list.uuid = import.uuid');
      $query->fields('import',array('created'))
      ->condition('list.server_name',$settings['importer'])
      ->range(0,1);
       $result=$query->execute();
      $created=0;
      while($record = $result->fetchAssoc()) {     
          $created = $record['created'];
      }
      $ti=time();
      $delta=(time()-$created)-$settings['refresh_list_minutes']*60;
      
      if($delta>0 || $force_update){
      db_truncate('copycat_import')->execute();
      
      $nodes = xmlrpc($settings['server'], Array('node.index' => Array($page, 'nid,uuid,vid', array('type' => $settings['source_structure']), $num_real_big)), $options);
      
    
    if (xmlrpc_error()) {
      $error = xmlrpc_error();
      watchdog('copycat', 'Error getting node list from parent server. Error: @error.', array('@error' => $error->message), WATCHDOG_CRITICAL);
    } else if(count($nodes) > 0) {      
      
      watchdog('copycat', 'Inserting '.count($nodes).' nodes in the list',array(), WATCHDOG_NOTICE);
      
      foreach ($nodes as $node) {
        $values[] = Array(  
          'nid' => $node['nid'],          
          'vid' => $node['vid'],
          'uuid' => $node['uuid'],
          'created' => REQUEST_TIME,          
        );
        }
          
      $query = db_insert('copycat_import')->fields(array('nid', 'vid', 'uuid','created'));
      foreach ($values as $record) {
          $query->values($record);
       }
      try{
       $query->execute();
       }catch(Exception $e){
         watchdog('copycat', $e->getMessage(), array(), WATCHDOG_NOTICE);
         watchdog('copycat', 'No list was retrieved from parent server',array(), WATCHDOG_CRITICAL);
       }

        
         watchdog('copycat', $settings['source_structure'].' - Node list of '.count($nodes).' items was successfully retrieved from parent server', array(), WATCHDOG_NOTICE);
      }else{
        watchdog('copycat', 'No list was retrieved from parent server',array(), WATCHDOG_CRITICAL);
      } 
      } 
       } 
      
      variable_set('copycat_options', $options);       
      copycat_perform_update();
      
    } else {
      watchdog('copycat','Copycat could not login to parent server.', array(), WATCHDOG_CRITICAL);
    }    
}

function copycat_perform_update() {  
  global $settings;
  global $copycat_status;
  global $force_update;
  $options = variable_get('copycat_options', '');
  
 
  // LA query scarica i contenuti presenti in lista escludendo i giÃ  importati alla revisone massima, a meno che la variabile force_update non sia true. 
   $query = db_select('copycat_import', 'import');
    $query->leftJoin('copycat_list', 'list', 'list.uuid = import.uuid');
    $query
    ->fields('import',array('uuid','vid','nid','created'))
    ->fields('list',array('nid','uuid','original_vid','original_nid','changed'))    
    ->range(0,$settings['nodes_for_page']);
    
    if($force_update == 1){
      $query->where('list.uuid IS null OR (import.created > list.changed) OR ((import.uuid = list.uuid) AND (import.vid <> list.original_vid))');
    }else{
      $query->where('list.uuid IS null OR ((import.uuid = list.uuid) AND (import.vid <> list.original_vid))');
    }
    
    
    $result = $query->execute();
    $number_of_rows = $result->rowCount();
    
    
    if($number_of_rows == 0){
      variable_set('copycat_' . $settings['importer'] . '_current_page', 0);
      variable_set('copycat_' . $settings['importer'] . '_force_update', 0);
      $priority = variable_get('copycat_' . $settings['importer'] . '_priority', 1);
      $priority-=10;
      if ($priority < 0) {
        $priority = 0;
      }
      variable_set('copycat_' . $settings['importer'] . '_priority', $priority);
    }
    
    while($record = $result->fetchAssoc()) {
     
    $intNid = $record['list_nid'];
    $extNid = $record['nid'];
    $uuid = $record['uuid'];
    
    $data = xmlrpc($settings['server'], Array('node.retrieve' => Array($extNid)), $options);
    if (xmlrpc_error()) {
      $error = xmlrpc_error();
      watchdog('copycat', 'Could not perform XMLRPC request (nid:' . $extNid . '). Error: @error.', array('@error' => $error->message), WATCHDOG_CRITICAL);
    } else {


      if (is_array($data)) {
        variable_set('current_node', $data);
        copycat_fill_node($data, $intNid);
      } else {

        watchdog('copycat', 'Import of node "' . $extnode['nid'] . '" failed', array(), WATCHDOG_DEBUG);
      }
    }
   }
}

function copycat_cron() {
  copycat_startup();
}

function copycat_startup() {
  global $copycat_config;
  global $copycat_status;
  global $force_update;
  global $settings;
  global $executionTime;
  global $importedNodes;
  $importedNodes = 0;
  $executionTime = microtime(true);
  $priorityList = Array();
  $copycat_status = Array(0,0,0,0);
  
  /* Al momento non funziona */
  $r_default_context = stream_context_get_default ( array
                    ('http' => array(
                        'proxy' => "http://proxy.sardegnait.csr:80",
                        'request_fulluri' => True,
                    ),
                )
            );
  
  //legenda: Array (record importati, record aggiornati, record ignorati, record errore)
  //variable_set("copycat_porti_tpe_priority", 1000);
  
  
  foreach ($copycat_config as $key => $value) {
    $force_update=variable_get('copycat_' . $key . '_force_update', false);
    if(!$force_update){$force_update=0; variable_set('copycat_' . $key . '_force_update', 0);}
    $page=variable_get('copycat_' . $key . '_current_page', 0);
    $priority_variable = "copycat_".$key . "_priority";
    $priority = variable_get($priority_variable, 100);
    if($page>0){$priority=100000000;}
    $priorityList = array_merge($priorityList, Array($key => $priority));
  }
  
  array_multisort(array_values($priorityList), SORT_DESC, $priorityList);
  $toProcessList = array_keys(array_slice($priorityList, 0, 1));
  $toProcess = $toProcessList[0];
  if($priorityList[$toProcess]==0){
    $toProcess=array_rand($priorityList,1);    
    }
    
  $settings = $copycat_config[$toProcess];
  
  
  copycat_get_node_list();
  $page=variable_get('copycat_' . $settings['importer'] . '_current_page', 0);
  if($page == 0 && $importedNodes == 0){
    watchdog('copycat', $toProcess . ': 100% - No new nodes to import' , array(), WATCHDOG_NOTICE);
  }else{
  $result = db_select('copycat_import', 'table_alias')
            ->fields('table_alias')
            ->execute();
  $num_of_results = $result->rowCount();
  $percent= floor(((($page * $settings['nodes_for_page'] + $importedNodes) /$num_of_results)*100));  
  watchdog('copycat', $toProcess . ': ' .$percent."% - ". $importedNodes . '/' . $settings['nodes_for_page'] . ' imported in ' . sprintf('%4d', ((microtime(true) - $executionTime))) . 's. '."<br /> CREATED:".$copycat_status[0]."<br />UPDATED:".$copycat_status[1]."<br />PAGE: ".$page, array(), WATCHDOG_NOTICE);
  variable_set('copycat_' . $settings['importer'] . '_current_page', ++$page);
  }
}

function copycat_fill_node($data, $nid) {
  global $settings;
  global $importedNodes;
  $autenticate = variable_get('autenticate', 0);
  $options = variable_get('copycat_options', '');

  $action_update = false;
  if ($nid > 0) {
    $new_node = node_load($nid);
    $action_update = true;
  } else {
    $new_node = new stdClass();
    $new_node->type = $settings['target_structure'];
    $new_node->uuid = $data['uuid'];
    $new_node->created = $data['created'];
  }

  $new_node->title = $data['title'];
  $new_node->uid = 1;
  $new_node->vuuid = $data['vuuid'];
  $new_node->data = $data['data'];
  $new_node->changed = $data['changed'];
  $new_node->language = $data['language'];
  $new_node->status = $data['status'];
  $new_node->log = ('Aggiornamento eseguito in automatico dal sistema in data ' . format_date($new_node->changed, $type = 'custom', $format = 'd/m/Y H:i:s', $timezone = NULL, $langcode = NULL));

  foreach (field_info_instances('node', $settings['target_structure']) as $kk) {
    $machine_name = $kk['field_name'];
    
    if (isset($settings['field_map']['' . $machine_name]['source_fieldname'])) {
      $source_fieldname = $settings['field_map']['' . $machine_name]['source_fieldname'];
      if ($source_fieldname == 'doNotMap')
        continue;
      if ($source_fieldname == 'noSource') {
        $retrieved_data = Array();
      } else {
        $retrieved_data = $data['field_' . $source_fieldname];
      }
    } else {
      $retrieved_data = $data['' . $machine_name];
    }
    
    if (isset($settings['field_map']['' . $machine_name]['data_processor'])) {
      $dataprocessors = $settings['field_map']['' . $machine_name]['data_processor'];
      foreach ($dataprocessors as $callback => $params) {
        if (count($params) > 0) {
          $inputData = array_merge($retrieved_data, $params);
        } else {
          $inputData = $retrieved_data;
        }
        $retrieved_data = call_user_func($callback, $inputData);
      }
    }
    
    $infos = field_info_field($machine_name);
    $tipo = $infos['type'];
    switch ($tipo) {
      case 'image':
        //To DO:
        // Controllare che il file immagine non sia giÃ  stato scaricato e quindi non sia giÃ  presente sul sistema
        $imgArray=Array();
        if (empty($retrieved_data)) break;
        $imgdatas=current($retrieved_data);
        foreach($imgdatas as $imgdata){
        $newImage=copycat_retrieve_image($machine_name,$imgdata, $new_node);
        array_push($imgArray,$newImage);
        }
        
             $new_node->{'' . $machine_name}= Array(LANGUAGE_NONE => $imgArray);
         
        break;
      case 'taxonomy_term_reference':
        if(empty($retrieved_data))break;
        $term=getInnerArray($retrieved_data);
        $tid = loadTaxonomy($term['tid']);
        if ($tid) {
          $new_node->{'' . $machine_name} = Array(LANGUAGE_NONE => Array(Array('tid' => $tid)));
        }
        break;
      default:

        $new_node->{'' . $machine_name} = $retrieved_data;

        break;
    }
  }


  try {
    $new_nid=node_save($new_node);
  } catch (Exception $e) {
    watchdog('copycat', $e->getMessage(), array(), WATCHDOG_NOTICE);
    watchdog('copycat', "Node " . $new_node->title . " was not imported", array(), WATCHDOG_NOTICE);
    unset($new_node);
    return false;
  }

  $importedNodes++;
  if ($action_update) {
    $id = db_update('copycat_list')
            ->fields(array(
                'original_vid' => $data['vid'],
                'changed' => REQUEST_TIME,
            ))
            ->condition('uuid', $new_node->uuid)
            ->execute();
    watchdog('copycat', "up1", array(), WATCHDOG_NOTICE);
    // ATTENZIONE: SE SI ELIMINA QUESTA QUERY E IL NOME VIENE AGGIORNATO DOPO LO SCARICAMENTO DELLA LISTA LA PROCEDURA NON TERMINERA' MAI
      $id = db_update('copycat_import')
            ->fields(array(
                'vid' => $data['vid'],                
            ))
            ->condition('uuid', $new_node->uuid)
            ->execute();
      watchdog('copycat', "up2", array(), WATCHDOG_NOTICE);
  } else {
    watchdog('copycat', "ins1", array(), WATCHDOG_NOTICE);
    $id = db_insert('copycat_list')
                    ->fields(array(                        
                        'server_id' => $settings['id'],
                        'server_name' => $settings['importer'],
                        'nid' => $new_node->nid,
                        'original_nid' => $data['nid'],
                        'original_vid' => $data['vid'],
                        'uuid' => $new_node->uuid,
                        'created' => REQUEST_TIME,
                        'changed' => REQUEST_TIME,
                    ))->execute();
    watchdog('copycat', "ins2", array(), WATCHDOG_NOTICE);
  }
  unset($new_node);

  return true;
}

function loadTaxonomy($tid) {
  global $settings;

  $taxonomy = xmlrpc($settings['server'], Array('taxonomy_term.retrieve' => Array($tid)));

  if (!$taxonomy) {
    return false;
  }

  $vocab = taxonomy_vocabulary_machine_name_load($taxonomy['vocabulary_machine_name']);

  if (!$vocab) {
    $vocabulary = new stdClass();
    $vocabulary->name = $taxonomy['vocabulary_machine_name'];
    $vocabulary->machine_name = $taxonomy['vocabulary_machine_name'];
    $vocabulary->hierarchy = 1;
    $vid = taxonomy_vocabulary_save($vocabulary);
  } else {
    $vid = $vocab->vid;
  }

  $result = db_query("SELECT * FROM {taxonomy_term_data} n WHERE uuid = :uuid", Array(':uuid' => $taxonomy['uuid']));

  if ($result->rowCount() > 0) {
    $record = $result->fetchObject();
    $target_tid = $record->tid;
  } else {
    $term = new stdClass();
    $term->vid = $vid;
    $term->name = $taxonomy['name'];
    $term->uuid = $taxonomy['uuid'];
    //TODO: Implement hyerarchy of taxonomy terms
    //$tax->parent: (optional) The parent term(s) for this term. This can be a single term ID or an array of term IDs. A value of 0 means this term does not have any parents. When omitting this variable during an update, the existing hierarchy for the term remains unchanged.
    $term->vocabulary_machine_name = $taxonomy['vocabulary_machine_name'];
    $target_tid = taxonomy_term_save($term);
  }

  return $target_tid;
}

/*
 * Implements hook_node_delete().
 */

function copycat_node_delete($node) {
  db_delete('copycat_list')
          ->condition('uuid', $node->uuid)
          ->execute();  
  
}

function copycat_retrieve_image($machine_name,$imgdata){
  global $settings;
  $options = variable_get('copycat_options', '');
  if ($options) {
          if (empty($imgdata))
            return false;
          
          $fid = $imgdata['fid'];
          $result = db_query("SELECT * FROM {file_managed} f WHERE uuid = ':uuid'", Array(':uuid' => $imgdata['uuid']));
          if($result->rowCount()>0){
            $newfile = $result->fetchObject();            
          }else{          
          $file = xmlrpc($settings['server'], Array('file.retrieve' => Array(Array("fid" => $fid), Array("file_contents" => 'true'), Array("image_styles" => 'true'))), $options);
          if (xmlrpc_error()) {
            $error = xmlrpc_error();
            watchdog('copycat', 'Could not perform XMLRPC request. Error: @error.', array('@error' => (String) $error), WATCHDOG_CRITICAL);
          } else {
            
            $filetype = explode('.', $file['filename']);
            if (!file_exists($settings['target_image_dir'])) {
              mkdir($settings['target_image_dir'], '0777', 1);
            };
            $filepath = $settings['target_image_dir'] . '/' . $file['filename'];
            $file_data = base64_decode($file['file']);
            try {
              $newfile = file_save_data($file_data, $filepath, FILE_EXISTS_RENAME);
            } catch (Exception $e) {
              watchdog('copycat', $e->getMessage(), array(), WATCHDOG_NOTICE);
              watchdog('copycat', "Image " . $filepath . " was not imported", array(), WATCHDOG_NOTICE);
              return false;
            }
          }
}         
          if(!$newfile) return false;
          $newImage = Array();
          
          $newImage['fid'] = $newfile->fid;
          $newImage['uri'] = $newfile->uri;
          $newImage['filesize'] = $newfile->filesize;
          
          $newImage['alt'] = $imgdata['alt'];
          $newImage['title'] = $imgdata['title'];
          $newImage['width'] = $imgdata['width'];
          $newImage['height'] = $imgdata['height'];
          $newImage['uid'] = 1;
          $newImage['filename'] = $imgdata['filename'];
          $newImage['filemime'] = $imgdata['filemime'];
          $newImage['status'] = $imgdata['status'];
          $newImage['timestamp'] = $imgdata['timestamp'];
          $newImage['type'] = $imgdata['type'];
          $newImage['uuid'] = $imgdata['uuid'];
          $newImage['image_dimensions'] = Array('width' => $imgdata['width'], 'height' => $imgdata['height']);
          $newImage['display'] = 1;
          if(!empty($imgdata['field_license'])){$newImage['field_license'] = $imgdata['field_license'];}
          if(!empty($imgdata['rdf_mapping'])){$newImage['rdf_mapping'] = $imgdata['rdf_mapping'];}
          
          return $newImage;
        }
        
        return false;
  
}
